
struct PSIn
{
	float4 Pos  : SV_Position;
    float3 WorldPos : W_POS;
	float3 Normal : NORMAL;
	float2 TexCoord : TEX;
};

cbuffer PhongIN : register(b0)
{
    float4 ambColor;
    float4 diffColor;
    float4 specColor;
};

cbuffer LightCameraBuffer : register(b1)
{
    float4 lightPos;
    float4 camerPos;
}

Texture2D texDiffuse : register(t0);
Texture2D texNormal : register(t1);
Texture2D textSpecular : register(t2);
SamplerState texSampler : register(s0);

//-----------------------------------------------------------------------------------------
// Pixel Shader
//-----------------------------------------------------------------------------------------

float4 PS_main(PSIn input) : SV_Target
{	
	// Debug shading #1: map and return normal as a color, i.e. from [-1,1]->[0,1] per component
	// The 4:th component is opacity and should be = 1
	//return float4(input.Normal*0.5+0.5, 1); 
    
    //Ambient
    float4 ambientColor = ambColor;  

    //Diffuse
    float4 diffuseColor = diffColor;
    diffuseColor = texDiffuse.Sample(texSampler, input.TexCoord);
    float3 lightVector = normalize(lightPos.xyz - input.WorldPos);
    float dotProductLightVec = dot(lightVector.xyz, input.Normal);

    //Specular
    float4 specularColor = specColor;
    specularColor = textSpecular.Sample(texSampler, input.TexCoord);
    float3 viewVector = normalize(camerPos.xyz - input.WorldPos);
    float3 reflectVector = normalize(reflect(-lightVector, input.Normal));
    float dotProductReflView = dot(reflectVector, viewVector);
    
    float4 result =
    max(ambientColor, 0) //Ambient
    + max(diffuseColor * dotProductLightVec, 0) //Diffuse
    + max(specularColor * pow(dotProductReflView, 50), 0); //Specular
   
    return result;
    
    
    

	// Debug shading #2: map and return texture coordinates as a color (blue = 0)
	//return float4(input.TexCoord, 0, 1);
}