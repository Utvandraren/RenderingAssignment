
struct PSIn
{
	float4 Pos  : SV_Position;
	float3 Normal : NORMAL;
	float2 TexCoord : TEX;
};

cbuffer PhongIN : register(b0)
{
    float4 Color;
};

cbuffer LightCameraBuffer : register(b1)
{
    float4 lightPos;
    float4 camerPos;
}

//-----------------------------------------------------------------------------------------
// Pixel Shader
//-----------------------------------------------------------------------------------------

float4 PS_main(PSIn input) : SV_Target
{	
	// Debug shading #1: map and return normal as a color, i.e. from [-1,1]->[0,1] per component
	// The 4:th component is opacity and should be = 1
	//return float4(input.Normal*0.5+0.5, 1);

    float4 lightvector = input.Pos - lightPos;
    
    ////diffuse
    float4 result = 
    (input.Normal + 0.5, 1) * Color +       //ambient
    (2 * (dot(lightvector, input.Normal))); //diffuse
    
    
    //result += float4(input.Normal + 0.5, 1) * Color;
    return result;
    
    
    //return float4(input.Normal + 0.5, 1) * Color;


	// Debug shading #2: map and return texture coordinates as a color (blue = 0)
	//return float4(input.TexCoord, 0, 1);
}